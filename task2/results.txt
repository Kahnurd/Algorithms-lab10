Task 2:

The third language: {a^n b^j a^n b^j | n >= 0, j>= 0}

The winning strategy is to have n and j = m.
Since VXY < the pumping length, there will never be a way for V or X to scale equally
accross the 4 spots. 

For example, since both sections of a's are separated by b's as long as the pumping lemma,
there is no way to capture both sections of a's in V or Y and pump them equally.
Same goes for the two sections of b's.

the eighth language: {a^k b^n c^n d^j: j != k}
For any even value of m, it should always be possible to put VXY inbetween b and c in some nice
way, so no matter how it decreases or increases they will = eachother's length.

However, I don't see a strategy for odd values of m.

This language is a CFL because it would be possible to make a PDA for it.
You could put an a in the stack for every a in the first section, then put a b\
in the stack for every b in the next section. Then once you get to d, you put a d in
for every b in the stack. Then once you get to the a's in the stack, you put as many c's
as you want, unless you run out of a's, then you have to at least put one more a in.
